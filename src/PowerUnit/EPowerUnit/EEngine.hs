module PowerUnit.EPowerUnit.EEngine where
--
import Commons.ISUnits
import Commons.Utilities
import Commons.Currency

{-# ANN module "HLint: ignore Reduce duplication" #-}

{-
    Computes the theoretical need of current for the
    production of some amount of torque and engine speed.
-}
getCurrent :: Torque -> Rev -> Voltage -> Current
getCurrent t r v = getCurrentWithEff t r v 1

{-
    Computes the theoretical need of current for the
    production of some amount of torque and engine speed,
    corrected by an efficiency rating.
-}
getCurrentWithEff :: Torque -> Rev -> Voltage -> Double -> Current
getCurrentWithEff _t _r _v eff =
    let Nm t = _t
        HZ r = fRevToHZ _r
        Volts v = _v
        --
        -- Power
        KWatt pow = fTorqueToKWatt _t _r
        --
        c = Ampere $ eff * (pow * 1000) / (1.73 * v)
    in c

{-
    Computes the theoretical current generated by the induction
    motor when on harvesting mode.
-}
getRegenCurrent :: Torque -> Rev -> Voltage -> Current
getRegenCurrent t r v = getRegenCurrentWithEff t r v 1 

{-
    Computes the theoretical current generated by the induction
    motor when on harvesting mode, corrected by an efficiency rating.
-}
getRegenCurrentWithEff :: Torque -> Rev -> Voltage -> Double -> Current
getRegenCurrentWithEff _t _r _v eff =
    let Nm t = _t
        HZ r = fRevToHZ _r
        Volts v = _v
        --
        c = Ampere $ eff * ((t * r) / v)
     in c